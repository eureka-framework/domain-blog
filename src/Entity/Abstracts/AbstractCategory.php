<?php

/*
 * Copyright (c) Romain Cottard
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

declare(strict_types=1);

namespace Eureka\Domain\Blog\Entity\Abstracts;

use Eureka\Component\Orm\AbstractEntity;
use Eureka\Component\Orm\RepositoryInterface;
use Eureka\Component\Validation\Exception\ValidationException;
use Eureka\Component\Validation\ValidatorFactoryInterface;
use Eureka\Component\Validation\ValidatorEntityFactoryInterface;
use Eureka\Component\Orm\Exception\OrmException;
use Eureka\Domain\Blog\Entity\Post;
use Eureka\Domain\Blog\Infrastructure\Mapper\PostMapper;
use Eureka\Component\Orm\EntityInterface;

/**
 * Abstract Category data class.
 *
 * /!\ AUTO GENERATED FILE. DO NOT EDIT THIS FILE.
 * You can add your specific code in child class: Category
 *
 * @author Eureka Orm Generator
 */
abstract class AbstractCategory extends AbstractEntity
{
    /** @var int $id Property id */
    protected int $id = 0;

    /** @var string $name Property name */
    protected string $name = '';

    /** @var Post[]|EntityInterface[]|null $joinManyCachePosts Property joinManyCachePosts */
    protected ?array $joinManyCachePosts = null;

    /**
     * AbstractEntity constructor.
     *
     * @param RepositoryInterface $repository
     * @param ValidatorFactoryInterface|null $validatorFactory
     * @param ValidatorEntityFactoryInterface|null $validatorEntityFactory
     */
    public function __construct(
        RepositoryInterface $repository,
        ?ValidatorFactoryInterface $validatorFactory = null,
        ?ValidatorEntityFactoryInterface $validatorEntityFactory = null
    ) {
        $this->setRepository($repository);
        $this->setValidatorFactories($validatorFactory, $validatorEntityFactory);

        $this->setValidatorConfig([
            'blog_category_id' => [
                'type'      => 'integer',
                'options'   => ['min_range' => 0, 'max_range' => 65535],
            ],
            'blog_category_name' => [
                'type'      => 'string',
                'options'   => ['min_length' => 0, 'max_length' => 50],
            ],
        ]);
    }

    /**
     * Get cache key
     *
     * @return string
     */
    public function getCacheKey(): string
    {
        return 'eka.dm.blog.blog.post.tag.' . $this->getId();
    }

    /**
     * Get value for property "blog_category_id"
     *
     * @return int
     */
    public function getId(): int
    {
        return $this->id;
    }

    /**
     * Get value for property "blog_category_name"
     *
     * @return string
     */
    public function getName(): string
    {
        return $this->name;
    }

    /**
     * Set value for property "blog_category_id"
     *
     * @param  int $id
     * @return $this
     * @throws ValidationException
     */
    public function setId(int $id): self
    {
        $this->validateInput('blog_category_id', $id);

        if ($this->exists() && $this->id !== $id) {
            $this->markFieldAsUpdated('id');
        }

        $this->id = $id;

        return $this;
    }

    /**
     * Set auto increment value.
     *
     * @param  integer $id
     * @return $this
     * @throws ValidationException
     */
    public function setAutoIncrementId(int $id): self
    {
        return $this->setId($id);
    }

    /**
     * Set value for property "blog_category_name"
     *
     * @param  string $name
     * @return $this
     * @throws ValidationException
     */
    public function setName(string $name): self
    {
        $this->validateInput('blog_category_name', $name);

        if ($this->exists() && $this->name !== $name) {
            $this->markFieldAsUpdated('name');
        }

        $this->name = $name;

        return $this;
    }

    /**
     * Get list of Post entities instance.
     *
     * @param  bool $isForceReload
     * @return Post[]
     * @throws OrmException
     */
    public function getAllPosts(bool $isForceReload = false): array
    {
        if ($isForceReload || $this->joinManyCachePosts === null) {
            $mapper = $this->getRepository()->getMapper(PostMapper::class);
            $this->joinManyCachePosts = $mapper->findAllByKeys([
                'blog_category_id' => $this->getId(),
            ]);
        }

        return $this->joinManyCachePosts;
    }

    /**
     * Set Post entity instances.
     *
     * @param Post[] $entities
     * @return $this
     */
    public function setAllPosts(array $entities): self
    {
        $this->joinManyCachePosts = $entities;

        return $this;
    }
}
